# Networks
# Defines a custom Docker network called jenkins - Docker creates a private subnet where containers can communicate.
networks:
  jenkins:                   # Custom network so Jenkins can reach DinD
    driver: bridge

# Volumes
# Defines named Docker volumes for persisting data. These volumes are initially empty but will store data when containers run.
# They appear empty in the Compose file because volumes are created by Docker on first use.
volumes:
  jenkins-data:               # Persistent Jenkins home (jobs, plugins, configs)
  docker-certs-ca:            # CA certificates for TLS
  docker-certs-client:        # Client certificates for Jenkins to connect to DinD
  docker-cache:               # Optional Docker layer cache

# Services
services:

  # Docker-in-Docker (DinD)
  dind:
    image: docker:dind
    container_name: dind
    privileged: true                       # Required to run Docker daemon inside container
    user: root
    restart: unless-stopped
    networks:
      jenkins:
        aliases:
          - docker                        # Jenkins can reach DinD at tcp://docker:2376
    environment:
      - DOCKER_TLS_CERTDIR=/certs          # Enable TLS for secure Docker communication
    volumes:
      - docker-certs-ca:/certs/ca
      - docker-certs-client:/certs/client
      - docker-cache:/var/lib/docker       # Docker image layer cache

  # Jenkins
  jenkins:
      image: jenkins/jenkins:lts-jdk17
      container_name: jenkins
      user: root
      restart: unless-stopped
      networks:
        - jenkins
      environment:
        - DOCKER_HOST=tcp://docker:2376       # Connect Jenkins to DinD
        - DOCKER_CERT_PATH=/certs/client
        - DOCKER_TLS_VERIFY=1
      ports:
        - "8080:8080"                         # Jenkins web UI
        - "50000:50000"                       # Jenkins agent port
      volumes:
        - jenkins-data:/var/jenkins_home       # Persistent Jenkins home
        - docker-certs-client:/certs/client:ro # Mount TLS client certs read-only